name: Docker
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: docker-php-drupal-nginx
  DOCKERFILE_1_13: Dockerfile-1.13.6-alpine
  DOCKERFILE_1_17: Dockerfile-1.17.6-alpine
  DOCKERFILE_1_21: Dockerfile-1.21.1-alpine
  TAG_1_13: 1.13.6-alpine.d8
  TAG_1_17: 1.17.6-alpine.d8
  TAG_1_21: 1.21.1-alpine.d8
  TAG_D8: d8
  TAG_1_13_RL: 1.13.6-alpine.d8-rootless
  TAG_1_17_RL: 1.17.6-alpine.d8-rootless
  TAG_1_21_RL: 1.21.1-alpine.d8-rootless
  TAG_D8_RL: d8-rootless

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build images
        run: |
          docker buildx build --load . --file $DOCKERFILE_1_13 --tag $IMAGE_NAME:$TAG_1_13 --build-arg user=root
          docker buildx build --load . --file $DOCKERFILE_1_17 --tag $IMAGE_NAME:$TAG_1_17 --build-arg user=root
          docker buildx build --load . --file $DOCKERFILE_1_21 --tag $IMAGE_NAME:$TAG_1_21 --build-arg user=root
          docker buildx build --load . --file $DOCKERFILE_1_13 --tag $IMAGE_NAME:$TAG_1_13_RL --build-arg user=1001
          docker buildx build --load . --file $DOCKERFILE_1_17 --tag $IMAGE_NAME:$TAG_1_17_RL --build-arg user=1001
          docker buildx build --load . --file $DOCKERFILE_1_21 --tag $IMAGE_NAME:$TAG_1_21_RL --build-arg user=1001

      - name: Test images
        run: |
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 80 --user root $IMAGE_NAME:$TAG_1_13
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user root $IMAGE_NAME:$TAG_1_13
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 80 --user root $IMAGE_NAME:$TAG_1_17
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user root $IMAGE_NAME:$TAG_1_17
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 80 --user root $IMAGE_NAME:$TAG_1_21
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user root $IMAGE_NAME:$TAG_1_21
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 8080 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_13_RL
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_13_RL
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 8080 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_17_RL
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_17_RL
          ./tests/image_verify.sh --source tests/expectations --env-file tests/envfile --http-port 8080 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_21_RL
          ./tests/image_verify.sh --source tests/overrides/expectations --env-file tests/overrides/envfile --http-port 4321 --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_21_RL

          # CORS Tests.
          echo "Starting CORS tests..."

          ## ROOT images - 1.13
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user root $IMAGE_NAME:$TAG_1_13
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user root $IMAGE_NAME:$TAG_1_13
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user root $IMAGE_NAME:$TAG_1_13 || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

          ## Rootless images - 1.13
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321  --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_13_RL
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_13_RL
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_13_RL || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

          ## ROOT images - 1.17
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user root $IMAGE_NAME:$TAG_1_17
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user root $IMAGE_NAME:$TAG_1_17
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user root $IMAGE_NAME:$TAG_1_17 || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

          ## Rootless images - 1.17
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_17_RL
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_17_RL
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_17_RL || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

          ## ROOT images - 1.21
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user root $IMAGE_NAME:$TAG_1_21
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321  --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user root $IMAGE_NAME:$TAG_1_21
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user root $IMAGE_NAME:$TAG_1_21 || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

          ## Rootless images - 1.21
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations --env-file tests/overrides/cors/envfile-filtered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_21_RL
          DOCKER_TEST_PATH=index.php CORS_ORIGIN_HOST=www.foobar.com ./tests/image_verify.sh --http-port 4321 --source tests/overrides/cors/expectations-unfiltered --env-file tests/overrides/cors/envfile-unfiltered --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_21_RL
          ## Here we want to assert that CORS header is not present.
          DOCKER_TEST_PATH=index.php ./tests/image_verify.sh \
          --http-port 4321 \
          --source tests/overrides/cors/expectations-filtered-different-domain \
          --env-file tests/overrides/cors/envfile-filtered-different-domain \
          --user "unknown uid 1001" $IMAGE_NAME:$TAG_1_21_RL || (EXIT_CODE=$?; if [ $EXIT_CODE -eq 5 ]; then exit 0; else exit $EXIT_CODE; fi)

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature/d8'

    steps:
      - uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push images to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID
          docker buildx build --push . --platform "linux/amd64" \
            --file $DOCKERFILE_1_13 \
            --tag $IMAGE_ID:$TAG_1_13 \
            --tag $IMAGE_ID:$TAG_D8 \
            --build-arg user=root
          docker buildx build --push . --platform "linux/amd64,linux/arm64" \
            --file $DOCKERFILE_1_17 \
            --tag $IMAGE_ID:$TAG_1_17 \
            --build-arg user=root
          docker buildx build --push . --platform "linux/amd64,linux/arm64" \
            --file $DOCKERFILE_1_21 \
            --tag $IMAGE_ID:$TAG_1_21 \
            --build-arg user=root
          docker buildx build --push . --platform "linux/amd64" \
            --file $DOCKERFILE_1_13 \
            --tag $IMAGE_ID:$TAG_1_13_RL \
            --tag $IMAGE_ID:$TAG_D8_RL \
            --build-arg user=1001
          docker buildx build --push . --platform "linux/amd64,linux/arm64" \
            --file $DOCKERFILE_1_17 \
            --tag $IMAGE_ID:$TAG_1_17_RL \
            --build-arg user=1001
          docker buildx build --push . --platform "linux/amd64,linux/arm64" \
            --file $DOCKERFILE_1_21 \
            --tag $IMAGE_ID:$TAG_1_21_RL \
            --build-arg user=1001
